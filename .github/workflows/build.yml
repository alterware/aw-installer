name: Build

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
    types: [opened, synchronize, reopened]

env:
  PREMAKE_VERSION: "5.0.0-beta2"

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-win:
    name: Build Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - debug
          - release
        arch:
          - x64
          - arm64
        include:
          - arch: x64
            platform: x64
          - arch: arm64
            platform: arm64
    steps:
      - name: Check out files
        uses: actions/checkout@main
        with:
          submodules: true
          fetch-depth: 0
          lfs: false

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@main

      - name: Install Premake5
        uses: diamante0018/setup-premake@master
        with:
          version: ${{ env.PREMAKE_VERSION }}

      - name: Generate project files
        run: premake5 vs2022

      - name: Set up problem matching
        uses: ammaraskar/msvc-problem-matcher@master

      - name: Build ${{matrix.arch}} ${{matrix.configuration}} binaries
        run: msbuild /m /v:minimal /p:Configuration=${{matrix.configuration}} /p:Platform=${{matrix.platform}} build/aw-installer.sln

      - name: Upload ${{matrix.arch}} ${{matrix.configuration}} binaries
        uses: actions/upload-artifact@main
        with:
          name: windows-${{matrix.arch}}-${{matrix.configuration}}
          path: |
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/aw-installer.exe
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/aw-installer.pdb

  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - debug
          - release
        arch:
          - x64
    steps:
      - name: Check out files
        uses: actions/checkout@main
        with:
          submodules: true
          fetch-depth: 0
          lfs: false

      - name: Install dependencies (x64)
        if: matrix.arch == 'x64'
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-gnutls-dev -y

      - name: Install Premake5
        uses: diamante0018/setup-premake@master
        with:
          version: ${{ env.PREMAKE_VERSION }}

      - name: Generate project files
        run: premake5 --cc=clang gmake2

      - name: Set up problem matching
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Build ${{matrix.arch}} ${{matrix.configuration}} binaries
        run: |
          pushd build
          make config=${{matrix.configuration}}_${{matrix.arch}} -j$(nproc)
        env:
          CC: clang
          CXX: clang++

      - name: Upload ${{matrix.arch}} ${{matrix.configuration}} binaries
        uses: actions/upload-artifact@main
        with:
          name: linux-${{matrix.arch}}-${{matrix.configuration}}
          path: |
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/aw-installer

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - debug
          - release
        arch:
          - arm64
    steps:
      - name: Check out files
        uses: actions/checkout@main
        with:
          submodules: true
          fetch-depth: 0
          lfs: false

      - name: Install Premake5
        uses: diamante0018/setup-premake@master
        with:
          version: ${{ env.PREMAKE_VERSION }}

      - name: Generate project files
        run: premake5 gmake2

      - name: Set up problem matching
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Build ${{matrix.arch}} ${{matrix.configuration}} binaries
        run: |
          pushd build
          make config=${{matrix.configuration}}_${{matrix.arch}} -j$(sysctl -n hw.logicalcpu)

      - name: Upload ${{matrix.arch}} ${{matrix.configuration}} binaries
        uses: actions/upload-artifact@main
        with:
          name: macos-${{matrix.arch}}-${{matrix.configuration}}
          path: |
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/aw-installer

  deploy:
    name: Deploy artifacts
    needs: [build-win, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Setup main environment
        if: github.ref == 'refs/heads/master'
        run: echo "ALTERWARE_INSTALLER_PATH=${{ secrets.ALTERWARE_INSTALLER_SSH_PATH  }}" >> $GITHUB_ENV

      - name: Download Release binaries
        uses: actions/download-artifact@main
        with:
          name: linux-x64-release

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.7.0
        with:
          key: ${{ secrets.ALTERWARE_MASTER_SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.ALTERWARE_MASTER_SSH_ADDRESS }} >> ~/.ssh/known_hosts

      - name: Upload release binary
        run: rsync -avz aw-installer ${{ secrets.ALTERWARE_MASTER_SSH_USER }}@${{ secrets.ALTERWARE_MASTER_SSH_ADDRESS }}:${{ env.ALTERWARE_INSTALLER_PATH }}/

      - name: Publish changes
        run: ssh ${{ secrets.ALTERWARE_MASTER_SSH_USER }}@${{ secrets.ALTERWARE_MASTER_SSH_ADDRESS }} ${{ secrets.ALTERWARE_SSH_INSTALLER_PUBLISH_COMMAND }}
